	group = PROJ_GROUP
	version = PROJ_VERSION	
	
	
	apply plugin: "java"
	apply plugin: "maven-publish"
	apply plugin: "eclipse"
	apply plugin: "idea"
	apply plugin: "signing"
	apply plugin: "java-library"
	eclipse {
		jdt {
			//if you want to alter the java versions (by default they are configured with gradle java plugin settings):
			sourceCompatibility = SOURCE_COMPILER_LEVEL
			targetCompatibility = TARGET_COMPILER_LEVEL
			javaRuntimeName = "../../org.eclipse.jdt.launching.JRE_CONTAINER"

		}
	}
    tasks.register('publishToCentralPortal', Exec) {
        commandLine 'curl', '-u', "${sonatype_username}:${sonatype_password}",
                '-X', 'POST',
                'https://ossrh-staging-api.central.sonatype.com/manual/upload/defaultRepository/com.bbossgroups'
    }
	tasks.withType(JavaCompile) {
		
		sourceCompatibility = SOURCE_COMPILER_LEVEL
		targetCompatibility = TARGET_COMPILER_LEVEL
		options.encoding = 'UTF-8'
	}

	tasks.withType(Javadoc) {
//		
//		
		options.encoding = 'UTF-8'
		// disable the crazy super-strict doclint tool in Java 8
        // noinspection SpellCheckingInspection
		if (JavaVersion.current().isJava8Compatible()) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}
	}
    tasks.register('sourcesJar', Jar) {
        archiveClassifier = "sources"
        from sourceSets.main.allJava
    }

    tasks.register('javaDocJar', Jar) {
        dependsOn javadoc
        archiveClassifier = "javadoc"
        from javadoc.destinationDir
    }
	artifacts {
		archives sourcesJar, javaDocJar
	}
	jar {
		manifest {
			attributes (
					'Implementation': archiveVersion,
					'Specification-Version': archiveVersion,
					'Implementation-Vendor': 'bbossgroups',
					'Implementation-ProductID': project.name,
					'Compile-Timestamp': new Date().format('yyyy-MM-dd HH:mm:ss'),
					'Compile-User': DEVELOPER_NAME
			)
		}
	}



	repositories {
		mavenLocal()
        mavenCentral()
		maven {
			url "https://maven.aliyun.com/repository/public"
		}
		
	}
	if(project.getProperty('skipTest'))
	{
        tasks.withType(Test) {
            enabled = false
        }
	}

	publishing {
		publications {
			mavenJava(MavenPublication) {
				groupId project.group
				artifactId project.name
				version "${version}"
				from components.java
				artifact sourcesJar
				artifact javaDocJar
//				versionMapping {
//					usage('java-api') {
//						fromResolutionOf('runtimeClasspath')
//					}
//					usage('java-runtime') {
//						fromResolutionResult()
//					}
//				}
//				from components.java
				pom {
					name = project.name
					packaging = 'jar'
					// optionally artifactId can be defined here
					description = PROJ_DESCRIPTION
					url = PROJ_WEBSITEURL

					scm {
						connection = scm_connection
						developerConnection = scm_developerConnection
						url = scm_url
					}

					licenses {
						license {
							name = PROJ_LICENCE_NAME
							url = PROJ_LICENCE_URL
						}
					}

					developers {
						developer {
							id = DEVELOPER_ID
							name = DEVELOPER_NAME
							email = DEVELOPER_EMAIL
						}
					}

				}
			}
		}
		repositories {
//			maven {
//				// change URLs to point to your repos, e.g. http://my.org/repo
//				def releasesRepoUrl = layout.buildDirectory.dir('repos/releases')
//				def snapshotsRepoUrl = layout.buildDirectory.dir('repos/snapshots')
//				url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
//			}
			maven {
				// change URLs to point to your repos, e.g. http://my.org/repo
				allowInsecureProtocol=true
				url = sonatype_url
				credentials {
					username = sonatype_username
					password = sonatype_password
				}

			}

		}
	}

	signing {
		sign publishing.publications.mavenJava
//		sign configurations.archives
	}


sourceSets {
    main {
        java {
            srcDir 'src'
            
        }
        resources{
        	
        	
        	
        }
    }
    test {
        java {
            srcDir 'test'
        }
        resources{
        	srcDir 'resources'
        }
    }
    
}

dependencies {
	testImplementation 'junit:junit:4.13.2'
	 api (
			[group: 'com.bbossgroups', name: 'bboss-core', version: "${BBOSS_VERSION}", transitive: true],
            [group: 'org.apache.commons', name: 'commons-pool2', version: '2.12.1', transitive: false],
            [group: 'redis.clients', name: 'jedis', version: "${jedisversion}", transitive: false],
            [group: 'org.mongodb', name: 'mongodb-driver-sync', version: "${mongodbversion}", transitive: true],
            [group: 'com.google.code.gson', name: 'gson', version: "2.13.1", transitive: false],
             
    )
    compileOnly 'com.google.guava:guava:33.3.1-jre'
    api group: 'commons-codec', name: 'commons-codec', version: '1.19.0'
    compileOnly (group: 'io.minio', name: 'minio', version: '8.5.17'){
        exclude group: 'com.fasterxml.jackson.jaxrs', module: 'jackson-jaxrs-json-provider'
        exclude group: 'com.fasterxml.jackson.dataformat', module: 'jackson-dataformat-csv'
        exclude group: 'com.fasterxml.jackson.module', module: 'jackson-module-scala_2.12'
        exclude group: 'com.fasterxml.jackson.datatype', module: 'jackson-datatype-jdk8'
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind'
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-annotations'
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-core'
        exclude group: 'commons-codec', module: 'commons-codec' 
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jdk8'

    }
    compileOnly 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.9.10'
    

    // AWS依赖开始
//    compileOnly platform("software.amazon.awssdk:bom:${s3version}")
    compileOnly (group: 'software.amazon.awssdk', name: 's3',version:s3version)    {

        exclude group: 'commons-codec', module: 'commons-codec'     
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
    compileOnly (group: 'software.amazon.awssdk', name: 'auth',version:s3version)    {
        exclude group: 'org.slf4j', module: 'slf4j-api'
        exclude group: 'commons-codec', module: 'commons-codec'
    }
    compileOnly (group: 'software.amazon.awssdk', name: 'regions',version:s3version)    {
        exclude group: 'org.slf4j', module: 'slf4j-api'
        exclude group: 'commons-codec', module: 'commons-codec'
    }
    compileOnly (group: 'software.amazon.awssdk', name: 'apache-client',version:s3version)
    {
        exclude group: 'org.slf4j', module: 'slf4j-api'
        exclude group: 'commons-codec', module: 'commons-codec'
        exclude group: 'org.apache.httpcomponents', module: 'httpcore'
    }

    api 'org.apache.httpcomponents:httpcore:4.4.16'
    // AWS依赖结束
    compileOnly (group: 'io.milvus', name: 'milvus-sdk-java', version: '2.6.3'){
        
        exclude group: 'com.google.guava', module: 'guava'
        exclude group: 'org.apache.commons', module: 'commons-pool2'
    }
     
}
